var utils = require('./utils');
var database;

var api = {
  process: process
}

var methods = {
  get: get,
  post: post,
  delete: remove
}


function process(database, req, res, next) {
  methods[req.method.toLowerCase()](database, req, res);
}

function getPathParts(req) {
  return req.path.split('/').filter(utils.isTruthy);
}

function get(database, req, res) {
  var method
    , sort
    , parts = getPathParts(req)
    , options = {}
  ;

  if(parts.length === 1) {
    method = findAll;
  } else if(parts.length === 2) {
    method = findOne;
  } else {
    method = find;
  }

  if(req.query._sort) {
    options.sort =  {
      key: req.query._sort,
      order: req.query._order || 'ASC'
    }
  }

  options._limit = req.query._limit || 20;
  options._offset = req.query._offset || 0;

  method(database, req, res, parts, options);
}

function findAll(database, req, res, parts, order) {
  database.findAll(parts[0], req.session.user,  order).then(function(items) {
    res.json(items);
  }, function(err) {
    return res.status(500).send(err.message || err);
  });
}

function findOne(database, req, res, parts) {
  database.findOne(parts[0], parts[1], req.session.user).then(function(item) {
    if(!item) {
      return res.status(404).send('Document with id: ' + parts[1] + ' not found in resource "' + parts[0] + '"');
    }
    if(item.length === 1) {
      res.json(item[0]);
    } else {
      res.json(item);
    }
  }, function(err) {
    return res.status(500).send(err.message || err);
  });
}

function find(database, req, res, parts, order) {
  var filter = parts.reduce(function(memo, part, index) {
    if(index && index%2) {
      var argument = decodeURI(parts[index+1]);
      memo[part] = isNaN(+argument) ? argument : +argument;
    }
    return memo;
  }, {});

  return database.find(parts[0], req.session.user, filter, order).then(function(items) {
    res.json(items);
  }, function(err) {
    return res.status(500).send(err.message || err);
  });
}


function post(database, req, res) {
  var parts = getPathParts(req);

  if(parts.length === 1) {
    database.insertDocument(parts[0], req.session.user, req.body).then(function(result) {
      if(result.length === 1) {
        res.json(result[0]);
      } else {
        res.json(result);
      }
    }, function(err) {
      return res.status(500).send(err.message || err);
    });
  } else if(parts.length === 2) {
    //Remove the autogenerated stuff;
    var autogenFields = ['id', 'user_id', '_created_date', '_last_updated_date', '_created_by_id'];
    autogenFields.forEach(function(field) { delete req.body[field]; });

    database.updateDocument(parts[0], parts[1], req.session.user, req.body).then(function(result) {
      if(result) {
        res.json(result);
      } else {
        res.status(304).send('Nothing was updated');
      }
    }, function(err) {
      return res.status(500).send(err.message || err);
    });
  }
}

function remove(database, req, res) {
  var parts = getPathParts(req);
  database.removeDocument(parts[0], parts[1], req.session.user).then(function(result) {
    res.json(result);
  }, function(err) {
     return res.status(500).send(err.message || err);
  });

}

module.exports = api;
